name: " CI "
on: [push]
jobs:
  spring-boot:
    strategy:
      matrix:
        java: [8,11]
        os: [ubuntu-latest]
        nodejs-version: [12]
        python-version: [3.8]
        docker-version: [19.09]
        docker-channel: [stable]
    name: spring-boot with java ${{ matrix.java }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Git clone
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python ${{ matrix.python-version }} deps
        uses: actions/cache@v1
        with:
          path: ~/.pip
          key: ${{ runner.os }}-${{ matrix.os }}-pip-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-pip-
      - name: Install / upgrade pip
        run: python -m pip install --upgrade pip setuptools
      - name: Install HTTPie
        run: pip install --upgrade httpie
      - name: Setup Docker ${{ matrix.docker-channel }} ${{ matrix.docker-version }}
        uses: docker-practice/actions-setup-docker@master
        with:
          docker_version: ${{ matrix.docker-version }}
          docker_channel: ${{ matrix.docker-channel }}
      - name: Cache docker ${{ matrix.docker-channel }} ${{ matrix.docker-version }}
        uses: actions/cache@v1
        with:
          path: ~/.docker
          key: ${{ runner.os }}-${{ matrix.os }}-docker-${{ hashFiles('**/Dockerfile*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-docker-
      - name: Setup NodeJS ${{ matrix.nodejs-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.nodejs-version }}
      - name: Cache npm ${{ matrix.nodejs-version }} deps
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.os }}-npm-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-npm-
      - name: Install npm apps (wait-port)
        run: npm install -g wait-port
      - name: Setup java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Cache maven deps ~/.m2/repository
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-
      - name: Build app
        run: cd $GITHUB_WORKSPACE && ./mvnw -f backing-services clean package spring-boot:build-image
      - name: Build proxy
        run: cd $GITHUB_WORKSPACE && docker build -t nginx-proxy-pass-gateway:0.0.1-SNAPSHOT nginx-proxy-pass-gateway
      - name: Run docker apps
        run: |
          docker network rm     apps-dot-net || echo ''
          docker network create apps-dot-net
          docker run -d --rm --net apps-dot-net --name backing-services backing-services:0.0.1-SNAPSHOT
          docker run -d --rm --net apps-dot-net -p 80:80 nginx-proxy-pass-gateway:0.0.1-SNAPSHOT
      - name: Test
        run: |
          wait-port 80
          sleep 5s
          http get :80/actuator/health
          http get :80/actuator
          http get :80/
  jib:
    strategy:
      matrix:
        java: [8,11]
        os: [ubuntu-latest]
        nodejs-version: [12]
        python-version: [3.8]
        docker-version: [19.09]
        docker-channel: [stable]
    name: jib with java ${{ matrix.java }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Git clone
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python ${{ matrix.python-version }} deps
        uses: actions/cache@v1
        with:
          path: ~/.pip
          key: ${{ runner.os }}-${{ matrix.os }}-pip-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-pip-
      - name: Install / upgrade pip
        run: python -m pip install --upgrade pip setuptools
      - name: Install HTTPie
        run: pip install --upgrade httpie
      - name: Setup Docker ${{ matrix.docker-channel }} ${{ matrix.docker-version }}
        uses: docker-practice/actions-setup-docker@master
        with:
          docker_version: ${{ matrix.docker-version }}
          docker_channel: ${{ matrix.docker-channel }}
      - name: Cache docker ${{ matrix.docker-channel }} ${{ matrix.docker-version }}
        uses: actions/cache@v1
        with:
          path: ~/.docker
          key: ${{ runner.os }}-${{ matrix.os }}-docker-${{ hashFiles('**/Dockerfile*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-docker-
      - name: Setup NodeJS ${{ matrix.nodejs-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.nodejs-version }}
      - name: Cache npm ${{ matrix.nodejs-version }} deps
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.os }}-npm-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-npm-
      - name: Install npm apps (wait-port)
        run: npm install -g wait-port
      - name: Setup java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Cache maven deps ~/.m2/repository
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-
      - name: Build app
        run: cd $GITHUB_WORKSPACE && ./mvnw -f backing-services clean package com.google.cloud.tools:jib-maven-plugin:dockerBuild -Dimage=backing-services:0.0.1-SNAPSHOT
      - name: Build proxy
        run: cd $GITHUB_WORKSPACE && docker build -t nginx-proxy-pass-gateway:0.0.1-SNAPSHOT nginx-proxy-pass-gateway
      - name: Run docker apps
        run: |
          docker network rm     apps-dot-net || echo ''
          docker network create apps-dot-net
          docker run -d --rm --net apps-dot-net --name backing-services backing-services:0.0.1-SNAPSHOT
          docker run -d --rm --net apps-dot-net -p 80:80 nginx-proxy-pass-gateway:0.0.1-SNAPSHOT
      - name: Test
        run: |
          wait-port 80
          sleep 5s
          http get :80/actuator/health
          http get :80/actuator
          http get :80/
